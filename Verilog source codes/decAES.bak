module decAES(
input reg [127:0] cipherMes,
input reg [127:0] key,
input clk,
output reg [127:0] message
);

wire [127:0] paddedCipher;
zeroPad zp1(
.i_data(cipherMes),
.clk(clk),
.o_data(paddedCipher)
);

wire [127:0] paddedKey;
zeroPad zp2(
.i_data(key),
.clk(clk),
.o_data(paddedKey)
);


reg [3:0] counter;
always@(paddedCipher,paddedKey)
begin
	counter = 4'd8;
end

//key expansion
wire [127:0] rnd1Key,rnd2Key,rnd3Key,rnd4Key,rnd5Key,rnd6Key,rnd7Key,rnd8Key,rnd9Key,rnd10Key;

KeyExp ke(
.Key_i(paddedKey),
.rnd1Key_o(rnd1Key),
.rnd2Key_o(rnd2Key),
.rnd3Key_o(rnd3Key),
.rnd4Key_o(rnd4Key),
.rnd5Key_o(rnd5Key),
.rnd6Key_o(rnd6Key),
.rnd7Key_o(rnd7Key),
.rnd8Key_o(rnd8Key),
.rnd9Key_o(rnd9Key),
.rnd10Key_o(rnd10Key)
);



//round 10
reg [127:0] stateMat,r;
wire [127:0] w1,w2;

invShiftRows sRv2(.shiftMatrix_i(r),.shiftMatrix_o(w1));

invSubs16Bytes sBv2(.Mat_i(w1),.subsMat_o(w2));

always@(*)
begin
	r = paddedCipher^rnd10Key;
	stateMat = w2^rnd9Key;
end


//round 9-1
wire [127:0] stateMat1,stateMat2,stateMat3,rndKey;



invMixCol mC(.mat_i(stateMat),.mixMat_o(stateMat1));

invShiftRows sR(.shiftMatrix_i(stateMat1),.shiftMatrix_o(stateMat2));

invSubs16Bytes sB(.Mat_i(stateMat2),.subsMat_o(stateMat3));



slctKey sK(
.counter(counter),
.rnd1Key(rnd1Key), 
.rnd2Key(rnd2Key),
.rnd3Key(rnd3Key),
.rnd4Key(rnd4Key),
.rnd5Key(rnd5Key),
.rnd6Key(rnd6Key),
.rnd7Key(rnd7Key),
.rnd8Key(rnd8Key),
.rnd9Key(rnd9Key),
.rnd10Key(rnd10Key),
.rndKey(rndKey));

	
	
always@(posedge clk)
begin
	if (counter > 4'd0)
	begin
		stateMat = stateMat3^rndKey;
		counter = counter - 4'd1;
		
	end
	else
		message = stateMat3^paddedKey;
end

endmodule